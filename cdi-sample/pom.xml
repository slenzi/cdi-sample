<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.lenzi.cdisample</groupId>
	<artifactId>cdi-sample</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>cdi-sample Maven Webapp</name>
	<url>http://maven.apache.org</url>
	
	<properties>
		<version.junit>4.12</version.junit>
		<version.javaee>7.0</version.javaee>
		<version.javax.servlet>3.1.0</version.javax.servlet>
		<version.logback>1.1.2</version.logback>
		<version.javax.cdi>1.2</version.javax.cdi>
		<version.weld>2.2.9.Final</version.weld>
		<version.weld.se>1.0.1-Final</version.weld.se>
		<version.deltaspike>1.2.1</version.deltaspike>
		<version.hibernate>4.3.8.Final</version.hibernate>
		<version.hibernate.jpa>1.0.0.Final</version.hibernate.jpa>
		<version.jandex>1.2.3.Final</version.jandex>
		<version.jersey>2.16</version.jersey>
		<version.jersey.cdi>2.14</version.jersey.cdi>
		<version.joda.time>2.7</version.joda.time>
		<version.jdbc.postgres>9.1-901-1.jdbc4</version.jdbc.postgres>
	</properties>
	
	<dependencies>

		<!-- JUnit testing -->	
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${version.junit}</version>
			<scope>test</scope>
		</dependency>
		
		<!-- logging -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${version.logback}</version>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${version.javax.servlet}</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- Date & time library -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>${version.joda.time}</version>
		</dependency>
		
		<!-- CDI API (not I need this?) -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<version>${version.javax.cdi}</version>
		</dependency>
			
		<!-- CDI Implementation -->
		<dependency>
			<groupId>org.jboss.weld.servlet</groupId>
			<artifactId>weld-servlet</artifactId>
			<version>${version.weld}</version>
		</dependency>
		<!-- Weld SE is required by Apache Deltaspike Weld Integration -->
		<dependency>
			<groupId>org.jboss.weld.se</groupId>
			<artifactId>weld-se-core</artifactId>
			<version>${version.weld}</version>
		</dependency>
		
		<!-- Apache Deltaspike Core API & Implementation -->
		<!--
		<dependency>
		    <groupId>org.apache.deltaspike.core</groupId>
		    <artifactId>deltaspike-core-api</artifactId>
		    <version>${version.deltaspike}</version>
		    <scope>compile</scope>
		</dependency>
		<dependency>
		    <groupId>org.apache.deltaspike.core</groupId>
		    <artifactId>deltaspike-core-impl</artifactId>
		    <version>${version.deltaspike}</version>
		    <scope>runtime</scope>
		</dependency>
		-->
		<!-- Apache Deltaspike JBoss Weld CDI integration -->
		<dependency>
		    <groupId>org.apache.deltaspike.cdictrl</groupId>
		    <artifactId>deltaspike-cdictrl-weld</artifactId>
		    <version>${version.deltaspike}</version>
		</dependency>
		<!--
		Apache Deltaspike JPA. The JPA module provides a transactional context and scope, enabling 
		execution of methods within transactions.
		-->
		<!--
		<dependency>
		    <groupId>org.apache.deltaspike.modules</groupId>
		    <artifactId>deltaspike-jpa-module-api</artifactId>
		    <version>${version.deltaspike}</version>
		    <scope>compile</scope>
		</dependency>
		<dependency>
		    <groupId>org.apache.deltaspike.modules</groupId>
		    <artifactId>deltaspike-jpa-module-impl</artifactId>
		    <version>${version.deltaspike}</version>
		    <scope>runtime</scope>
		</dependency>
		-->
		<!--
		Apache Deltaspike Container Control. Provides a way to generically run CDI containers from
		inside of unit tests or Java SE applications.
		-->
		<!--
		<dependency>
			<groupId>org.apache.deltaspike.cdictrl</groupId>
			<artifactId>deltaspike-cdictrl-api</artifactId>
			<version>${version.deltaspike}</version>
		</dependency>
		 -->

		<!-- Hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${version.hibernate}</version>
			<classifier/>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${version.hibernate}</version>
			<classifier/>
		</dependency>
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.1-api</artifactId>
			<version>${version.hibernate.jpa}</version>
			<classifier/>
		</dependency>
		<!-- For generating JPA meta models for type safe queries. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>${version.hibernate}</version>
		</dependency>

		<!-- Jandex is a space efficient Java annotation indexer and offline reflection library. -->
		<!-- Needed by Weld 2.2.x -->
		<dependency>
			<groupId>org.jboss</groupId>
			<artifactId>jandex</artifactId>
			<version>${version.jandex}</version>
		</dependency>
		
		<!-- Jersey -->
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>${version.jersey}</version>
		</dependency>
		
		<!-- Jerson jackson JSON marshalling -->
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-jackson</artifactId>
			<version>${version.jersey}</version>
		</dependency>
		
		<!-- Jersey + CDI integration -->
		<dependency>
			<groupId>org.glassfish.jersey.containers.glassfish</groupId>
			<artifactId>jersey-gf-cdi</artifactId>
			<version>${version.jersey.cdi}</version>
		</dependency>

		<!-- Postgres JDBC driver -->
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${version.jdbc.postgres}</version>
		</dependency>			
				
	</dependencies>
	
	<!--  
	<repositories>
		
		<repository>
			<id>central</id>
			<name>ECOG Internal Repository</name>
			<url>https://dev.webapps.ecog.org/archiva/repository/internal/</url>
		</repository>
		
	</repositories>	
	-->
	
	<build>
		
		<finalName>cdi-sample</finalName>
		
		<plugins>
		
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-compiler-plugin</artifactId>
			    <version>3.1</version>
			    <configuration>
			        <source>1.7</source>
			        <target>1.7</target>
			        <!-- need this line for maven processor plugin to correctly generate metamodels without complaining of duplicate classes -->
			        <compilerArgument>-proc:none</compilerArgument>
			    </configuration>
			</plugin>
		
			<!--
			For generating JPA 2.0 meta models to be used with criteria API
			We use Hibernate's meta model generation API, included as a dependency above
			-->
			<plugin>
				<groupId>org.bsc.maven</groupId>
				<artifactId>maven-processor-plugin</artifactId>
				<version>2.2.0</version>
				<executions>
					<execution>
						<id>process</id>
						<goals>
							<goal>process</goal>
						</goals>
						<phase>generate-sources</phase>
						<configuration>
							<processors>
          						<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
        					</processors>
							<outputDirectory>
								src/generated/java
							</outputDirectory>
							<compilerArguments>
								-source 1.7 -target 1.7
							</compilerArguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
		
		</plugins>
		
	</build>
	
</project>
